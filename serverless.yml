org: dfstio
app: zkcloudworker
service: zkcloudworker

plugins:
  - serverless-plugin-typescript
  - serverless-prune-plugin
  - "@digitalmaas/serverless-plugin-lambda-dead-letter"

provider:
  name: aws
  versionFunctions: false
  runtime: nodejs18.x
  region: eu-west-1
  logRetentionInDays: 7
  environment:
    TASKS_TABLE: ${file(./env.json):TASKS_TABLE, env:TASKS_TABLE}
    DEPLOYERS_TABLE: ${file(./env.json):DEPLOYERS_TABLE, env:DEPLOYERS_TABLE}
    FILES_TABLE: ${file(./env.json):FILES_TABLE, env:FILES_TABLE}
    JOBS_TABLE: ${file(./env.json):JOBS_TABLE, env:JOBS_TABLE}
    STEPS_TABLE: ${file(./env.json):STEPS_TABLE, env:STEPS_TABLE}
    PROOFS_TABLE: ${file(./env.json):PROOFS_TABLE, env:PROOFS_TABLE}
    BUCKET: ${file(./env.json):BUCKET_NAME, env:BUCKET_NAME}
    AWS_KMS_ENCRYPTION_KEY_ID: ${file(./env.json):AWS_KMS_ENCRYPTION_KEY_ID, env:AWS_KMS_ENCRYPTION_KEY_ID}
    JWT_PRIVATEKEY: ${file(./env.json):JWT_PRIVATEKEY, env:JWT_PRIVATEKEY}
    ZKCLOUDWORKER_AUTH: ${file(./env.json):ZKCLOUDWORKER_AUTH, env:ZKCLOUDWORKER_AUTH}
    PINATA_JWT: ${file(./env.json):PINATA_JWT, env:PINATA_JWT}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ses:*"
        - lambda:InvokeFunction
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.FILES_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.JOBS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.STEPS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PROOFS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DEPLOYERS_TABLE}"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:HeadObject
      Resource: "arn:aws:s3:::${self:provider.environment.BUCKET}/*"
    - Effect: Allow
      Action:
        - ec2:DescribeNetworkInterfaces
        - ec2:CreateNetworkInterface
        - ec2:DeleteNetworkInterface
        - ec2:AssignPrivateIpAddresses
        - ec2:UnassignPrivateIpAddresses
      Resource: "*"
    - Effect: Allow
      Action:
        - elasticfilesystem:ClientMount
        - elasticfilesystem:ClientRootAccess
        - elasticfilesystem:ClientWrite
        - elasticfilesystem:DescribeMountTargets
      Resource: "*"
    - Effect: Allow
      Action:
        - kms:Encrypt
        - kms:Decrypt
        - kms:Encrypt*
        - kms:Decrypt*
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource: "*"

functions:
  zkcloudworker:
    handler: zkcloudworker.api
    timeout: 30
    memorySize: 512
    deadLetter:
      sqs:
        queueName: zkcloudworker-dl-queue
    events:
      - http:
          path: zkcloudworker
          method: post
          cors: true
  worker:
    handler: zkcloudworker.worker
    timeout: 900
    memorySize: 3008
    deadLetter:
      sqs:
        queueName: worker-dl-queue
    fileSystemConfig:
      localMountPath: /mnt/efs
      arn: arn:aws:elasticfilesystem:eu-west-1:058264205854:access-point/fsap-04fa7f21664729898
    vpc:
      securityGroupIds:
        - sg-07cdd56c86fb70d88
      subnetIds:
        - subnet-0c3cc81920de4c4c3
        - subnet-08f6fb90590c47699

  test:
    handler: test.cloud
    timeout: 900
    memorySize: 3008
    fileSystemConfig:
      localMountPath: /mnt/efs
      arn: arn:aws:elasticfilesystem:eu-west-1:058264205854:access-point/fsap-04fa7f21664729898
    vpc:
      securityGroupIds:
        - sg-07cdd56c86fb70d88
      subnetIds:
        - subnet-0c3cc81920de4c4c3
        - subnet-08f6fb90590c47699
  tasks:
    handler: tasks.check
    timeout: 300
    memorySize: 192
    deadLetter:
      sqs:
        queueName: tasks-dl-queue
    events:
      - schedule:
          rate: rate(60 minutes)
          enabled: true
          name: ts
  sequencer:
    handler: sequencer.run
    timeout: 900
    memorySize: 512
    deadLetter:
      sqs:
        queueName: sequencer-dl-queue
  step:
    handler: sequencer.step
    timeout: 900
    memorySize: 3008
    deadLetter:
      sqs:
        queueName: step-dl-queue
    fileSystemConfig:
      localMountPath: /mnt/efs
      arn: arn:aws:elasticfilesystem:eu-west-1:058264205854:access-point/fsap-04fa7f21664729898
    vpc:
      securityGroupIds:
        - sg-07cdd56c86fb70d88
      subnetIds:
        - subnet-0c3cc81920de4c4c3
        - subnet-08f6fb90590c47699

resources:
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET}
        AccessControl: Private
    TasksDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TASKS_TABLE}
    FilesDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: filename
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: filename
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.FILES_TABLE}
    JobsDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: jobId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: jobId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.JOBS_TABLE}
    StepsDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: jobId
            AttributeType: S
          - AttributeName: stepId
            AttributeType: S
        KeySchema:
          - AttributeName: jobId
            KeyType: HASH
          - AttributeName: stepId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.STEPS_TABLE}
    ProofsDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: jobId
            AttributeType: S
          - AttributeName: stepId
            AttributeType: S
        KeySchema:
          - AttributeName: jobId
            KeyType: HASH
          - AttributeName: stepId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PROOFS_TABLE}
    DeployersDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: publicKey
            AttributeType: S
        KeySchema:
          - AttributeName: publicKey
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DEPLOYERS_TABLE}

package:
  excludeDevDependencies: true
  exclude:
    - test/**
    - jest.config.js
    - tsconfig.json
    - tslint.json
    - env*.json
    - .travis.yml
    - .prettierrc
    - node_modules/aws-sdk/**

custom:
  s3Bucket: formbucket-${self:provider.environment.BUCKET}
